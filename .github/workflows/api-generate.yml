name: API Generate Workflow

on:
  issues:
    types: [opened, labeled]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  generate-api:
    if: contains(github.event.issue.labels.*.name, 'api-generate')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          pnpm install
          cd langchain-api-generator
          pnpm install

      - name: Build TypeScript
        run: |
          cd langchain-api-generator
          pnpm build
          echo "Build completed. Contents of dist directory:"
          ls -la dist/

      - name: Generate API code
        id: generate
        run: |
          cd langchain-api-generator
          echo "Starting API generation..."
          echo "Running generate script..."
          DEBUG=langchain pnpm generate || {
            echo "Generation failed with exit code $?"
            echo "Error output:"
            cat error.log || true
            exit 1
          }
          echo "API generation completed"
          echo "Directory contents after generation:"
          ls -la
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          LOG_LEVEL: 'debug'

      - name: Check PR creation
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            try {
              console.log('PRを確認中...');
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `api-generate-${context.payload.issue.number}`
              });
              if (prs.data.length === 0) {
                console.log('PRが作成されていません');
                core.setFailed('PRの作成に失敗しました');
              } else {
                console.log('PRが正常に作成されました:', prs.data[0].html_url);
              }
            } catch (error) {
              console.log('PRの確認中にエラーが発生しました:', error);
              core.setFailed(`PRの確認に失敗しました: ${error.message}`);
            }
